//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentItProject.RentItReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RentItReference.IRentItService")]
    public interface IRentItService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Add", ReplyAction="http://tempuri.org/IRentItService/AddResponse")]
        double Add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Add", ReplyAction="http://tempuri.org/IRentItService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Subtract", ReplyAction="http://tempuri.org/IRentItService/SubtractResponse")]
        double Subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Subtract", ReplyAction="http://tempuri.org/IRentItService/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Multiply", ReplyAction="http://tempuri.org/IRentItService/MultiplyResponse")]
        double Multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Multiply", ReplyAction="http://tempuri.org/IRentItService/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Divide", ReplyAction="http://tempuri.org/IRentItService/DivideResponse")]
        double Divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Divide", ReplyAction="http://tempuri.org/IRentItService/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Fact", ReplyAction="http://tempuri.org/IRentItService/FactResponse")]
        int Fact(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Fact", ReplyAction="http://tempuri.org/IRentItService/FactResponse")]
        System.Threading.Tasks.Task<int> FactAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DupN", ReplyAction="http://tempuri.org/IRentItService/DupNResponse")]
        string DupN(string s, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DupN", ReplyAction="http://tempuri.org/IRentItService/DupNResponse")]
        System.Threading.Tasks.Task<string> DupNAsync(string s, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Next", ReplyAction="http://tempuri.org/IRentItService/NextResponse")]
        int Next();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Next", ReplyAction="http://tempuri.org/IRentItService/NextResponse")]
        System.Threading.Tasks.Task<int> NextAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRentItServiceChannel : RentItProject.RentItReference.IRentItService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RentItServiceClient : System.ServiceModel.ClientBase<RentItProject.RentItReference.IRentItService>, RentItProject.RentItReference.IRentItService {
        
        public RentItServiceClient() {
        }
        
        public RentItServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RentItServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentItServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentItServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double n1, double n2) {
            return base.Channel.Add(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double n1, double n2) {
            return base.Channel.AddAsync(n1, n2);
        }
        
        public double Subtract(double n1, double n2) {
            return base.Channel.Subtract(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double n1, double n2) {
            return base.Channel.SubtractAsync(n1, n2);
        }
        
        public double Multiply(double n1, double n2) {
            return base.Channel.Multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double n1, double n2) {
            return base.Channel.MultiplyAsync(n1, n2);
        }
        
        public double Divide(double n1, double n2) {
            return base.Channel.Divide(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double n1, double n2) {
            return base.Channel.DivideAsync(n1, n2);
        }
        
        public int Fact(int n) {
            return base.Channel.Fact(n);
        }
        
        public System.Threading.Tasks.Task<int> FactAsync(int n) {
            return base.Channel.FactAsync(n);
        }
        
        public string DupN(string s, int n) {
            return base.Channel.DupN(s, n);
        }
        
        public System.Threading.Tasks.Task<string> DupNAsync(string s, int n) {
            return base.Channel.DupNAsync(s, n);
        }
        
        public int Next() {
            return base.Channel.Next();
        }
        
        public System.Threading.Tasks.Task<int> NextAsync() {
            return base.Channel.NextAsync();
        }
    }
}
